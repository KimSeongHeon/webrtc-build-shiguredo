diff --git a/sdk/objc/native/src/audio/audio_device_ios.h b/sdk/objc/native/src/audio/audio_device_ios.h
index a86acb56fe..45b349bc3f 100644
--- a/sdk/objc/native/src/audio/audio_device_ios.h
+++ b/sdk/objc/native/src/audio/audio_device_ios.h
@@ -171,6 +171,8 @@ class AudioDeviceIOS : public AudioDeviceGeneric,
   void HandleSampleRateChange();
   void HandlePlayoutGlitchDetected();
   void HandleOutputVolumeChange();
+  
+  bool RestartAudioUnit(bool enable_input);
 
   // Uses current `playout_parameters_` and `record_parameters_` to inform the
   // audio device buffer (ADB) about our internal audio parameters.
@@ -200,7 +202,7 @@ class AudioDeviceIOS : public AudioDeviceGeneric,
 
   // Activates our audio session, creates and initializes the voice-processing
   // audio unit and verifies that we got the preferred native audio parameters.
-  bool InitPlayOrRecord();
+  bool InitPlayOrRecord(bool enable_input);
 
   // Closes and deletes the voice-processing I/O unit.
   void ShutdownPlayOrRecord();
@@ -260,19 +262,21 @@ class AudioDeviceIOS : public AudioDeviceGeneric,
   // will be changed dynamically to account for this behavior.
   rtc::BufferT<int16_t> record_audio_buffer_;
 
+  // Set to 1 when recording is initialized and 0 otherwise.
+  std::atomic<int> recording_is_initialized_;
+
   // Set to 1 when recording is active and 0 otherwise.
   std::atomic<int> recording_;
 
+  // Set to 1 when playout is initialized and 0 otherwise.
+  std::atomic<int> playout_is_initialized_;
+
   // Set to 1 when playout is active and 0 otherwise.
   std::atomic<int> playing_;
 
   // Set to true after successful call to Init(), false otherwise.
   bool initialized_ RTC_GUARDED_BY(thread_);
 
-  // Set to true after successful call to InitRecording() or InitPlayout(),
-  // false otherwise.
-  bool audio_is_initialized_;
-
   // Set to true if audio session is interrupted, false otherwise.
   bool is_interrupted_;
 
diff --git a/sdk/objc/native/src/audio/audio_device_ios.mm b/sdk/objc/native/src/audio/audio_device_ios.mm
index dd2c11bdd2..c6796c54d8 100644
--- a/sdk/objc/native/src/audio/audio_device_ios.mm
+++ b/sdk/objc/native/src/audio/audio_device_ios.mm
@@ -94,10 +94,11 @@ static void LogDeviceInfo() {
     : bypass_voice_processing_(bypass_voice_processing),
       audio_device_buffer_(nullptr),
       audio_unit_(nullptr),
+      recording_is_initialized_(0),
       recording_(0),
+      playout_is_initialized_(0),
       playing_(0),
       initialized_(false),
-      audio_is_initialized_(false),
       is_interrupted_(false),
       has_configured_session_(false),
       num_detected_playout_glitches_(0),
@@ -176,48 +177,52 @@ static void LogDeviceInfo() {
   LOGI() << "InitPlayout";
   RTC_DCHECK_RUN_ON(thread_);
   RTC_DCHECK(initialized_);
-  RTC_DCHECK(!audio_is_initialized_);
+  RTC_DCHECK(!playout_is_initialized_.load());
   RTC_DCHECK(!playing_.load());
-  if (!audio_is_initialized_) {
-    if (!InitPlayOrRecord()) {
+  if (!recording_is_initialized_.load()) {
+    if (!InitPlayOrRecord(false)) {
       RTC_LOG_F(LS_ERROR) << "InitPlayOrRecord failed for InitPlayout!";
       return -1;
     }
   }
-  audio_is_initialized_ = true;
+
+  playout_is_initialized_.store(1, std::memory_order_release);
   return 0;
 }
 
 bool AudioDeviceIOS::PlayoutIsInitialized() const {
   RTC_DCHECK_RUN_ON(thread_);
-  return audio_is_initialized_;
+  return playout_is_initialized_.load();
 }
 
 bool AudioDeviceIOS::RecordingIsInitialized() const {
   RTC_DCHECK_RUN_ON(thread_);
-  return audio_is_initialized_;
+  return recording_is_initialized_.load();
 }
 
 int32_t AudioDeviceIOS::InitRecording() {
   LOGI() << "InitRecording";
   RTC_DCHECK_RUN_ON(thread_);
   RTC_DCHECK(initialized_);
-  RTC_DCHECK(!audio_is_initialized_);
+  RTC_DCHECK(!recording_is_initialized_.load());
   RTC_DCHECK(!recording_.load());
-  if (!audio_is_initialized_) {
-    if (!InitPlayOrRecord()) {
+  if (!playout_is_initialized_.load()) {
+    if (!InitPlayOrRecord(true)) {
       RTC_LOG_F(LS_ERROR) << "InitPlayOrRecord failed for InitRecording!";
       return -1;
     }
+  } else {
+    RestartAudioUnit(true);
   }
-  audio_is_initialized_ = true;
+  recording_is_initialized_.store(1, std::memory_order_release);
+
   return 0;
 }
 
 int32_t AudioDeviceIOS::StartPlayout() {
   LOGI() << "StartPlayout";
   RTC_DCHECK_RUN_ON(thread_);
-  RTC_DCHECK(audio_is_initialized_);
+  RTC_DCHECK(playout_is_initialized_.load());
   RTC_DCHECK(!playing_.load());
   RTC_DCHECK(audio_unit_);
   if (fine_audio_buffer_) {
@@ -242,15 +247,15 @@ static void LogDeviceInfo() {
 int32_t AudioDeviceIOS::StopPlayout() {
   LOGI() << "StopPlayout";
   RTC_DCHECK_RUN_ON(thread_);
-  if (!audio_is_initialized_ || !playing_.load()) {
+  if (!playout_is_initialized_.load() || !playing_.load()) {
     return 0;
   }
   if (!recording_.load()) {
     ShutdownPlayOrRecord();
-    audio_is_initialized_ = false;
+    recording_is_initialized_.store(0, std::memory_order_release);
   }
   playing_.store(0, std::memory_order_release);
-
+  playout_is_initialized_.store(0, std::memory_order_release);
   // Derive average number of calls to OnGetPlayoutData() between detected
   // audio glitches and add the result to a histogram.
   int average_number_of_playout_callbacks_between_glitches = 100000;
@@ -273,7 +278,7 @@ static void LogDeviceInfo() {
 int32_t AudioDeviceIOS::StartRecording() {
   LOGI() << "StartRecording";
   RTC_DCHECK_RUN_ON(thread_);
-  RTC_DCHECK(audio_is_initialized_);
+  RTC_DCHECK(recording_is_initialized_.load());
   RTC_DCHECK(!recording_.load());
   RTC_DCHECK(audio_unit_);
   if (fine_audio_buffer_) {
@@ -296,14 +301,19 @@ static void LogDeviceInfo() {
 int32_t AudioDeviceIOS::StopRecording() {
   LOGI() << "StopRecording";
   RTC_DCHECK_RUN_ON(thread_);
-  if (!audio_is_initialized_ || !recording_.load()) {
+  if (!recording_is_initialized_.load() || !recording_.load()) {
     return 0;
   }
   if (!playing_.load()) {
     ShutdownPlayOrRecord();
-    audio_is_initialized_ = false;
+    playout_is_initialized_.store(0, std::memory_order_release);
+  } else if (playout_is_initialized_.load()) {
+    //restart audio unit with no input
+    RestartAudioUnit(false);
   }
   recording_.store(0, std::memory_order_release);
+  recording_is_initialized_.store(0, std::memory_order_release);
+  
   return 0;
 }
 
@@ -579,7 +589,7 @@ static void LogDeviceInfo() {
   SetupAudioBuffersForActiveAudioSession();
 
   // Initialize the audio unit again with the new sample rate.
-  if (!audio_unit_->Initialize(playout_parameters_.sample_rate())) {
+  if (!audio_unit_->Initialize(playout_parameters_.sample_rate(), recording_is_initialized_.load())) {
     RTCLogError(@"Failed to initialize the audio unit with sample rate: %d",
                 playout_parameters_.sample_rate());
     return;
@@ -600,6 +610,45 @@ static void LogDeviceInfo() {
   RTCLog(@"Successfully handled sample rate change.");
 }
 
+bool AudioDeviceIOS::RestartAudioUnit(bool enable_input) {
+  RTC_DCHECK_RUN_ON(&io_thread_checker_);
+  LOGI() << "RestartAudioUnit";
+
+  // If we don't have an audio unit yet, or the audio unit is uninitialized,
+  // there is no work to do.
+  if (!audio_unit_ || audio_unit_->GetState() < VoiceProcessingAudioUnit::kInitialized) {
+    return false;
+  }
+
+  bool restart_audio_unit = false;
+  if (audio_unit_->GetState() == VoiceProcessingAudioUnit::kStarted) {
+    audio_unit_->Stop();
+    PrepareForNewStart();
+    restart_audio_unit = true;
+  }
+
+  if (audio_unit_->GetState() == VoiceProcessingAudioUnit::kInitialized) {
+    audio_unit_->Uninitialize();
+  }
+
+  // Initialize the audio unit again with the same sample rate.
+  const double sample_rate = playout_parameters_.sample_rate();
+
+  if (!audio_unit_->Initialize(sample_rate, enable_input)) {
+    RTCLogError(@"Failed to initialize the audio unit with sample rate: %f", sample_rate);
+    return false;
+  }
+
+  // Restart the audio unit if it was already running.
+  if (restart_audio_unit && !audio_unit_->Start()) {
+    RTCLogError(@"Failed to start audio unit with sample rate: %f", sample_rate);
+    return false;
+  }
+
+  LOGI() << "Successfully enabled audio unit for recording.";
+  return true;
+}
+
 void AudioDeviceIOS::HandlePlayoutGlitchDetected() {
   RTC_DCHECK_RUN_ON(thread_);
   // Don't update metrics if we're interrupted since a "glitch" is expected
@@ -726,7 +775,7 @@ static void LogDeviceInfo() {
 
   // If we're not initialized we don't need to do anything. Audio unit will
   // be initialized on initialization.
-  if (!audio_is_initialized_) return;
+  if (!playout_is_initialized_.load() && !recording_is_initialized_.load()) return;
 
   // If we're initialized, we must have an audio unit.
   RTC_DCHECK(audio_unit_);
@@ -764,7 +813,7 @@ static void LogDeviceInfo() {
     RTCLog(@"Initializing audio unit for UpdateAudioUnit");
     ConfigureAudioSession();
     SetupAudioBuffersForActiveAudioSession();
-    if (!audio_unit_->Initialize(playout_parameters_.sample_rate())) {
+    if (!audio_unit_->Initialize(playout_parameters_.sample_rate(), recording_is_initialized_.load())) {
       RTCLogError(@"Failed to initialize audio unit.");
       return;
     }
@@ -854,7 +903,7 @@ static void LogDeviceInfo() {
   RTCLog(@"Unconfigured audio session.");
 }
 
-bool AudioDeviceIOS::InitPlayOrRecord() {
+bool AudioDeviceIOS::InitPlayOrRecord(bool enable_input) {
   LOGI() << "InitPlayOrRecord";
   RTC_DCHECK_RUN_ON(thread_);
 
@@ -890,7 +939,7 @@ static void LogDeviceInfo() {
       return false;
     }
     SetupAudioBuffersForActiveAudioSession();
-    audio_unit_->Initialize(playout_parameters_.sample_rate());
+    audio_unit_->Initialize(playout_parameters_.sample_rate(), enable_input);
   }
 
   // Release the lock.
diff --git a/sdk/objc/native/src/audio/voice_processing_audio_unit.h b/sdk/objc/native/src/audio/voice_processing_audio_unit.h
index ed9dd98568..b474cda104 100644
--- a/sdk/objc/native/src/audio/voice_processing_audio_unit.h
+++ b/sdk/objc/native/src/audio/voice_processing_audio_unit.h
@@ -75,7 +75,7 @@ class VoiceProcessingAudioUnit {
   VoiceProcessingAudioUnit::State GetState() const;
 
   // Initializes the underlying audio unit with the given sample rate.
-  bool Initialize(Float64 sample_rate);
+  bool Initialize(Float64 sample_rate, bool enable_input);
 
   // Starts the underlying audio unit.
   OSStatus Start();
diff --git a/sdk/objc/native/src/audio/voice_processing_audio_unit.mm b/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
index 3905b6857a..9a97dc2601 100644
--- a/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
+++ b/sdk/objc/native/src/audio/voice_processing_audio_unit.mm
@@ -111,19 +111,6 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
     return false;
   }
 
-  // Enable input on the input scope of the input element.
-  UInt32 enable_input = 1;
-  result = AudioUnitSetProperty(vpio_unit_, kAudioOutputUnitProperty_EnableIO,
-                                kAudioUnitScope_Input, kInputBus, &enable_input,
-                                sizeof(enable_input));
-  if (result != noErr) {
-    DisposeAudioUnit();
-    RTCLogError(@"Failed to enable input on input scope of input element. "
-                 "Error=%ld.",
-                (long)result);
-    return false;
-  }
-
   // Enable output on the output scope of the output element.
   UInt32 enable_output = 1;
   result = AudioUnitSetProperty(vpio_unit_, kAudioOutputUnitProperty_EnableIO,
@@ -193,7 +180,7 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
   return state_;
 }
 
-bool VoiceProcessingAudioUnit::Initialize(Float64 sample_rate) {
+bool VoiceProcessingAudioUnit::Initialize(Float64 sample_rate, bool enable_input) {
   RTC_DCHECK_GE(state_, kUninitialized);
   RTCLog(@"Initializing audio unit with sample rate: %f", sample_rate);
 
@@ -204,6 +191,20 @@ static OSStatus GetAGCState(AudioUnit audio_unit, UInt32* enabled) {
   LogStreamDescription(format);
 #endif
 
+  // Enable input on the input scope of the input element.
+  // keep it disabled if audio session is configured for playback only
+  UInt32 _enable_input = enable_input ? 1 : 0;
+  result = AudioUnitSetProperty(vpio_unit_, kAudioOutputUnitProperty_EnableIO,
+                                kAudioUnitScope_Input, kInputBus, &_enable_input,
+                                sizeof(_enable_input));
+  if (result != noErr) {
+    DisposeAudioUnit();
+    RTCLogError(@"Failed to enable input on input scope of input element. "
+                "Error=%ld.",
+                (long)result);
+    return false;
+  }
+
   // Set the format on the output scope of the input element/bus.
   result =
       AudioUnitSetProperty(vpio_unit_, kAudioUnitProperty_StreamFormat,
